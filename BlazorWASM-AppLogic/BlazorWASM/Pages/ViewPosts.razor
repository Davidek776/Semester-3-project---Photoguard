@page "/posts/all"
@using UIComponents
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using BlazorWasm.Services
@using System.Globalization
@inject IPostService postService
@inject ITagService tagService
@inject IAuthService authService
@inject IUserService userService;
@inject ILocationService locationService;

@inject NavigationManager navMgr

<body>


    <div id="wrapper">
    <SideBar></SideBar>
	    <div class="main_content">

		     <Alert Type="success" Show="@showAlert">
                    <p>@alertMsg</p>
                    <button @onclick="(() => showAlert = false)">great</button>
            </Alert>

		    <header>
			    <div class="header_inner">
				    <div class="left-side">
					    <!-- Logo -->
					    <div id="logo" class=" uk-hidden@s">
						    <a href="home.html">
							    <img src="assets/images/logo-mobile.png" alt="">
							    <img src="assets/images/logo-mobile-light.png" class="logo_inverse">
						    </a>
					    </div>

					    <div class="triger" uk-toggle="target: #wrapper ; cls: sidebar-active">
						    <i class="uil-bars"></i>
					    </div>

					    <div class="header_search flex items-center flex-row-reverse">
							<a href="#" @onclick:preventDefault="true" @onclick="OnInitializedAsync"> <i class="icon-feather-x text-lg mr-1 text-gray-400"></i></a>
						    <button class="btn btn-outline-dark mr-1" @onclick="LoadPostsWithTags" >filter</button>

						    <div class="icon-search">
							    <a href="#" @onclick:preventDefault="true" @onclick="LoadPostsWithTags">
								    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
								         stroke="currentColor">
									    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
									          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
								    </svg>
							    </a>
						    </div>

						    <input type="text" @bind="tagFilter" placeholder="Filter by Tag.." @onsubmit="LoadPostsWithTags">
					    </div>

				    </div>
				    <div class="right-side lg:pr-4">
					    <!-- upload -->
					    <AuthorizeView>
						    <Authorized>
								<button @onclick="LoadPostsBasedOnLocationAsync" class="btn btn-secondary mr-2">preffered location</button>
							    <a href="/posts/create"
							       class="bg-pink-500 flex font-bold hidden hover:bg-pink-600 hover:text-white inline-block items-center lg:block max-h-10 mr-4 px-4 py-2 rounded shado text-white">
								    <ion-icon name="add-circle" class="-mb-1
                             mr-1 opacity-90 text-xl uilus-circle"></ion-icon> Upload
							    </a>
						    </Authorized>
					    </AuthorizeView>

                       

				    </div>
			    </div>
		    </header>

		    <div class="container m-auto">

			    <h1 class="lg:text-2xl text-lg font-extrabold leading-none text-gray-900 tracking-tight mb-5"> Feed </h1>

			    <div class="lg:flex justify-center lg:space-x-10 lg:space-y-0 space-y-5">

				    <!-- left sidebar-->
				    <div class="space-y-5 flex-shrink-0 lg:w-7/12">
					    @* Origin post *@
					    @if (posts == null)
					    {
						    <p>Loading..</p>
					    }
					    else if (!posts.Any())
					    {
						    <p>No posts to display</p>
					    }
					    else
					    {
						    @foreach (var post in posts)
						    {
							    <SinglePost PostDetail="@post" OnDeleteCallback="OnDelete">

							    </SinglePost>




						    }
					    }
					    @if (!string.IsNullOrEmpty(msg))
					    {
						    <label style="color: red">@msg</label>
					    }

				    </div>



			    </div>

		    </div>


	    </div>

        </div>

	</body>


@code {
    [Parameter]
    public int Id { get; set; }


    private IList<Post>? posts = new List<Post>();
    private string msg;
    private bool isLiked;

	private string? tagFilter;
    private IEnumerable<TagPost>? postTag;
	private bool showAlert;
	private string alertMsg;


    protected override async Task OnInitializedAsync()
    {
        try
        {
	        await LoadPosts();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

	private async Task OnDelete()
	{
		alertMsg = "Post was successfully deleted!";
		showAlert = true;

		await LoadPosts();
	}

	private async Task LoadPosts()
	{
		tagFilter = "";
		IEnumerable<Post> temp = await postService.GetAsync();
		posts = temp.ToList();
	}

	private async Task<long?> GetUserLocationId()
	{
		ClaimsPrincipal context = await authService.GetAuthAsync();
		if (context.Identity?.Name == null)
		{
			msg = "You have to be logged in!";
			return null;
		}

		var users = await userService.GetUsersAsync(context.Identity.Name);

		var user = users.FirstOrDefault();

		return user.LocationId;
	}

	private async Task LoadPostsBasedOnLocationAsync()
	{
		try
		{
			long? locationId = await GetUserLocationId();
			if (locationId == null || locationId == 0)
			{
				msg = "You have to be logged in!";
				return;
			}

			Coordinate coordinates = await locationService.GetCoordinatesAsync((int)locationId);

			IEnumerable<Post> temp = await postService.GetInRadiusAsync(coordinates.latitude.ToString(CultureInfo.CreateSpecificCulture("en-GB")), coordinates.longitude.ToString(CultureInfo.CreateSpecificCulture("en-GB")), 30000);
			posts = temp.ToList();
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			msg = e.Message;
		}

	}

    private async Task LoadPostsWithTags()
    {
        try
        {
            if (tagFilter.Equals(""))
            {
                OnInitializedAsync();
            }
            else
            {
                posts.Clear();
                postTag = await tagService.GetPostTagAsync(0, tagFilter.ToLower());
                foreach (var tagPost in postTag)
                {
                    ICollection<Post> temp = await postService.GetAsync(tagPost.postId, null, null);
                    posts.Add(temp.FirstOrDefault());
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}