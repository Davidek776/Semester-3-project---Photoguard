@page "/posts/all"
@using UIComponents
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Collections
@inject IPostService postService

@if (posts == null)
{
    <p>Loading..</p>
}
else if (!posts.Any())
{
    <p>No posts to display</p>
}
else
{
    
    @foreach (var post in posts)
    {
        <a href="posts/@post.Id">
            Go to post
        </a>
        <SinglePost Post="post"/>

    }
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    //<div>@post.Tags</div>
    private IList<Post>? posts = new List<Post>();
    private string msg;
    private bool isLiked;

    
    private string? tagFilter;
    private ICollection<TagPost>? postTag;
    private IList<int>? postIdsFilter;
    
    [Parameter]
    public string? Id { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await postService.GetInRadiusAsync(new Coordinate(55.8581310000, 9.8475880000), 30000);
            IEnumerable<Post> temp = await postService.GetAsync();
            posts = temp.ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task LoadPosts()
    {
        try
        {
            posts.Clear();
            postIdsFilter = new List<int>();
            postTag = await tagService.GetPostTagAsync(0, tagFilter.ToLower());
            foreach (var tagPost in postTag)
            {
                ICollection<Post> temp = await postService.GetAsync(tagPost.postId, null, null);
                posts.Add(temp.FirstOrDefault());
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}