@page "/posts/all"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Collections
@inject IPostService postService
@inject NavigationManager navMgr
@inject IUserService userService



@if (posts == null)
{
    <p>Loading..</p>
}
else if (!posts.Any())
{
    <p>No posts to display</p>
    
}
else
{
    
    @foreach (var post in posts)
    {

        <div class="post-card">
            <a href="PostDetails/@post.Id">
                <div>@post.Title</div>
                <div>@post.PostedOn</div>
                <div>@post.Location</div>
                <div>@post.Description</div>
                <div><!--image--></div>
                <div>@post.Owner.UserName</div>
                <div>@Convert(@post.Id);</div>
                <div>@returnInt(post.Id)</div>
            </a>
        </div>
    }
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private IEnumerable<User>? users;
    private string msg;
    private int count;
    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            posts = await postService.GetAsync();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

     async Task<int> CountLikes(int id)
    {
        Console.WriteLine("XDd");
        count = await userService.CountLikes(id);

        return count;
    }
    
    async Task<int> returnInt(int id)
    {
        int x = (await userService.CountLikes(id));
        return x;
    }

    private int Convert(int id )
    {
        CountLikes(id);
        int countInt = this.count;
        return countInt;
    }

}