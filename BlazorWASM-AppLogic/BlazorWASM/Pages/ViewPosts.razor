@page "/posts/all"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using BlazorWasm.Services
@using Domain.DTOs
@inject IUserService userService;
@inject IPostService postService;
@using System.Collections
@inject IPostService postService
@inject NavigationManager navMgr
@inject IUserService userService



@if (posts == null)
{
    <p>Loading..</p>
}
else if (!posts.Any())
{
    <p>No posts to display</p>

}
else
{

    @foreach (var post in posts)
    {

        int i = returnInt(post.Id);
        <div class="post-card">
            <a href="PostDetails/@post.Id">
                <div>@post.Title</div>
                <div>@post.PostedOn</div>
                <div>@post.Location</div>
                <div>@post.Description</div>
                <div><!--image--></div>
                <div>@post.Owner.UserName</div>
                <div>@Convert(@post.Id);</div>
                <div>@returnInt(post.Id)</div>
                <div>@post.Likes</div>
                <div>@post.Tags</div>
                <div>@i</div>
            </a>
            @if (likedPosts.Contains(post.Id))
            {
                <div class="field">
                    <button class="like-button" role="button">Like
                        <img class="icon" src="img/like_pressed.svg"/>
                    </button>
                </div>
            }
            @if(!likedPosts.Contains(post.Id))
            {

                <div class="field">
                    <button class="like-button" role="button"
                            @onclick="() => LikePost(post.Id)">Like
                        <img class="icon" src="img/like_notpressed.svg"/>
                    </button>
                </div>
            }
        </div>
    }
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private IEnumerable<User>? users;
    private string msg;
    private int count;
    [Parameter]
    public string? Id { get; set; }
    private string userId;
    List<int> likedPosts;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            likedPosts = new List<int>();
            likedPosts.Clear();
            //likedPosts = await userService.getLikedPostsAsync();
            posts = await postService.GetAsync();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    async Task LikePost(int postId)
    {

        try
        {
            /*
            ClaimsPrincipal context = await authService.GetAuthAsync();
                var claims = context.Identities.First().Claims.ToList();
                string? id = claims?.FirstOrDefault(x => x.Type.Equals("Id", StringComparison.OrdinalIgnoreCase))?.Value;
            Console.WriteLine("User id: " + long.Parse(id));
            LikePostDto dto = new LikePostDto(Id, long.Parse(id));
            */

            long userID = 1;
            LikePostDto dto = new LikePostDto(postId, userID);
            Console.WriteLine($"Post id: {postId}, user id: {userID}");
            await userService.LikePost(dto);
            likedPosts.Add(postId);

     async Task<int> CountLikes(int id)
    {
        Console.WriteLine("XDd");
        count = await userService.CountLikes(id);

        return count;
    }

    async Task<int> returnInt(int id)
    {
        int x = (await userService.CountLikes(id));
        return x;
    }

    private int Convert(int id )
    {
        CountLikes(id);
        int countInt = this.count;
        return countInt;
    }

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    int returnInt(int id)
    {
        return id;
    }

}