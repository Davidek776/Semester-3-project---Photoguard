@page "/posts/all"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Collections
@inject IPostService postService
@inject ITagService tagService
@inject NavigationManager navMgr


    <div class="createPostCard">
        <div class="filters-container">
            <div class="filter">
                <label>Search by tag:</label>
                <input name="name" type="text" class="feedback-input" placeholder="Type here..." @bind="tagFilter"/>
            </div>
        </div>
        <div class="field">
            <button @onclick="LoadPosts" class="button-35" role="button">Search</button>
        </div>
    </div>

@if (posts == null)
{
    <p>Loading..</p>
}
else if (!posts.Any())
{
    <p>No posts to display</p>
}
else
{
    
    @foreach (var post in posts)
    {
        <div class="post-card">
            <a href="posts/@post.Id">
                <div>@post.Title</div>
                <div>@post.PostedOn</div>
                <div>@post.Description</div>
                <img src="@post.ImgUrl" alt="thumbnail"/>
                <div>@post.Owner.UserName</div>
                <div>@post.Likes</div>
                <div>@post.Tags</div>
            </a>
        </div>
    }
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    
    private IList<Post>? posts = new List<Post>();
    private string msg;
    
    private string? tagFilter;
    private ICollection<TagPost>? postTag;
    private IList<int>? postIdsFilter;
    
    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IEnumerable<Post> temp = await postService.GetAsync();
            posts = temp.ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
    
    private async Task LoadPosts()
    {
        try
        {
            posts.Clear();
            postIdsFilter = new List<int>();
            postTag = await tagService.GetPostTagAsync(0, tagFilter.ToLower());
            foreach (var tagPost in postTag)
            {
                ICollection<Post> temp = await postService.GetAsync(tagPost.postId, null, null);
                posts.Add(temp.FirstOrDefault());
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}
