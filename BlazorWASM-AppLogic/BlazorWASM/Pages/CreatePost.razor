@page "/posts/create"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Models
@using global::Shared
@using global::UIComponents
@using UIComponents
@using System.Security.Claims
@using BlazorWasm.Services
@using System.Diagnostics.SymbolStore
@inject NavigationManager navMgr
@inject IPostService postService
@inject ILocationService locationService
@inject IAuthService authService
@inject HttpClient Http

@inject ITagService tagService
@inject IImageUploadService imageUploadService

	<Alert Type="success" Show="@showAlert">
		<p>Successfully created post!</p>
		<button @onclick="@NavigateToPost">show me</button>
		<button @onclick="(() => showAlert = false)">close</button>
	</Alert>

<div class="card">
	<h3>Create Post</h3>
	<div class="form-group field">
		<label>Title:</label>
		<input type="text" @bind="postTitle"/>
		<label>Body:</label>
		<input type="text" @bind="postDescription"/>
		<label>Tags</label>
		<input type="text" @bind="newTag" @ref="tagInput"/>
		<button @onclick="@AddTag">add </button>

		@foreach (string tag in postTags)
		{
			<div class="row">
				@tag
				<button @onclick="(() => RemoveTag(tag))" class="btn-close"></button>
			</div>
		}

		<InputFile OnChange="@OnChangeAsync" accept="image/png, image/jpeg"></InputFile>
	</div>
	<div class="button-row">
		@if (!string.IsNullOrEmpty(msg))
		{
			<label style="color: red">@msg</label>
		}
		<button @onclick="CreateAsync" class="acceptbtn">Create</button>
	</div>
</div>
<MapComponent @ref="Map"></MapComponent>


@code {
	ElementReference tagInput;
    private ImageFile? filesBase64 = null;
    private string postTitle = "";
    private string postDescription = "";
    private IList<string> postTags = new List<string>();
    private string newTag = "";
    private bool showAlert;
    private long id;

	private MapComponent Map;

    private string msg = "";


	private async Task OnChangeAsync(InputFileChangeEventArgs e)
    {
        msg = "";
        filesBase64 = null;

        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {

            var buf = new byte[file.Size];
            try
            {
                using (var stream = file.OpenReadStream(5_000_000))
                {
                    await stream.ReadAsync(buf);
                }
            }
            catch (Exception exception)
            {
                msg = "Image must be smaller than 5mb";
                Console.WriteLine(exception);
            }

            filesBase64 = (new ImageFile {base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name});
        }
    }


    private async Task CreateAsync()
    {
        if (!Validate())
            return;

        try
        {
	        // get image
            string imgUrl = await imageUploadService.UploadAsync(filesBase64);

	        Coordinate coordinates = await Map.GetCoordinates();

	        LocationCreationDto locationCreationDto = new("", "", "", Country.AD, coordinates);

	        int locationId = await locationService.CreateAsync(locationCreationDto);
	        
	        // get user id
			// TODO the user id is hardcoded in please change it with JWT to match the logged in user
			// int? userId = AuthenticationStateProvider.GetAuthenticationStateAsync().Id;
	        // PostCreationDto postCreationDto = new(postTitle, userId ?? 1, postDescription, imgUrl, postTags, locationId);
	        
	        ClaimsPrincipal context = await authService.GetAuthAsync();
	        var claims = context.Identities.First().Claims.ToList();
	        string? userIdAsStrubg = claims?.FirstOrDefault(x => x.Type.Equals("Id", StringComparison.OrdinalIgnoreCase))?.Value;
	        long userId = long.Parse(userIdAsStrubg);

            PostCreationDto dto = new(postTitle, userId, postDescription, imgUrl, locationId);

	        id = await postService.CreateAsync(dto);
	        

	        PostTagCreationDto tagDto = new(id, postTags.ToArray());
	        await tagService.CreateAsync(tagDto);

	        showAlert = true;
	        postTitle = "";
	        postDescription = "";
	        postTags = new List<string>();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private bool Validate()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return false;
        }

        if (string.IsNullOrEmpty(postDescription))
        {
            msg = "Body cannot be empty!";
            return false;
        }

        if (filesBase64 == null || filesBase64.base64data.Equals(""))
        {
            msg = "Please upload an image";
            return false;
        }

        return true;
    }

    private void AddTag()
    {

	    if (newTag.Equals("") || postTags.Contains(newTag))
        {
	        tagInput.FocusAsync();
	        return;
        }
        postTags.Add(newTag);
        newTag = "";
	    tagInput.FocusAsync();
    }

    private void RemoveTag(string tag)
    {
        postTags.Remove(tag);
    }

    private void NavigateToPost()
    {
        navMgr.NavigateTo("posts/" + id);
    }

}
