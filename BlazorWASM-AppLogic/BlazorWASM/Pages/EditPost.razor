@page "/EditPost/{id:int}"
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager navMgr;
@inject ITagService tagService;
<h3>EditPost</h3>

<div class="card">
    @if (postData == null)
    {
        <label>Post not found</label>
    }
    else
    {
        <h3>Update Todo</h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div class="form-group field">
            <label>Description:</label>
            <input type="text" @bind="postDescription"/>
        </div>
        <label>Tags</label>
        <input type="text" @bind="newTag"/>
        <button @onclick="@AddTag">add </button>

        @foreach (string tag in postTags)
        {
            <div class="row">
                @tag
                <button @onclick="(() => RemoveTag(tag))" class="btn-close"></button>
            </div>
        }
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="UpdateAsync" class="acceptbtn">Update</button>
        </div>

    }
</div>




@code {
    [Parameter]
    public int Id { get; set; }

    private string postTitle = "";
    private string postDescription = "";
    private IList<string> postTags = new List<string>();
    private string newTag = "";
    Post? postData { get; set; }

    private string msg = "";

	protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            ICollection<Post> posts = await postService.GetAsync(Id);
            postData = posts.FirstOrDefault();

	        if (postData == null)
	        {
		        msg = "This post does not exist!";
		        return;
	        }

	        postTitle = postData.Title;
	        postDescription = postData.Description;

	        await LoadPostTags();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

	private async Task LoadPostTags()
	{
		IEnumerable<Tag> tags = await tagService.GetPostTagAsync(Id);
		foreach (var tag in tags)
		{
			postTags.Add(tag.tagName);
		}
	}

    private async Task UpdateAsync()
    {
        try
        {
			UpdatePostDto dto = new(Id)
			{
			    Title = postTitle,
			    Description = postDescription,
			    Tags = postTags
			};

            await postService.UpdateAsync(dto, postData.Owner.Id);
            await tagService.DeleteAsync(postData.Id);
            PostTagCreationDto tagDto = new(Id, postTags.ToArray());
            await tagService.CreateAsync(tagDto);


            navMgr.NavigateTo("/posts/all");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void AddTag()
    {
        if (newTag.Equals("") || postTags.Contains(newTag))
        {
            return;
        }
        postTags.Add(newTag);
        newTag = "";
    }

    private void RemoveTag(string tag)
    {
        postTags.Remove(tag);
    }
}
