@page "/EditPost/{id:int}"
@using UIComponents
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService postService
@inject NavigationManager navMgr;
@inject ITagService tagService;

<body>


<Alert Type="success" Show="@showAlert">
	<p>Post #@Id was succesfully edited!</p>
	<button @onclick="NavigateToFeed">go to feed</button>
	<button @onclick="(() => showAlert = false)">keep editing</button>
</Alert>


<div id="wrapper">
	<SideBar></SideBar>

	<!-- create post -->
	<div class="main_content">
		<div id="offcanvas-create flex justify-center ">
			@if (postData == null)
			{
				<label>Post not found</label>
			}
			else
			{

				<div class=" lg:w-full dark:bg-gray-700 dark:text-gray-300 p-0">

					<button class="uk-offcanvas-close" type="button" uk-close></button>

					<div class="-mb-1 border-b font-semibold px-5 py-5 text-lg">
						<h4>Edit post @Id</h4>
					</div>

					<div class=" p-6 space-y-3">
						<div>
							<label class="mb-0"> Title </label>
							<input placeholder="Title" @bind="postTitle" class="bg-gray-100 dark:bg-gray-600 shadow-none border focus:border-blue-600 mt-2 outline-none px-3 py-2 rounded-md w-full">
						</div>
						<div>
							<label class="mb-0"> Description </label>
							<textarea name="description" rows="3" @bind="postDescription" class="bg-gray-100 shadow-none border mt-2 w-full px-3 py-2 rounded-md focus:border-blue-600 outline-none mt- "id="description" placeholder="Please describe your product."></textarea>
						</div>
						<div>
							<label class="mb-0"> Tags</label>
							<input name="description" @bind="newTag" class="bg-gray-100 shadow-none border mt-2 w-full px-3 py-2 rounded-md focus:border-blue-600 outline-none mt- "id="description" placeholder="Please add tag."></input>
							<button @onclick="@AddTag" class="btn btn-dark mt-2">add </button>

						</div>
						<h3>Tags:</h3>
						<div class="flex-row flex-wrap">
							@foreach (string tag in postTags)
							{
								<div class="btn btn-light flex justify-content-between my-1 w-25">
									@tag
									<button @onclick="(() => RemoveTag(tag))" class="btn-close px-2"></button>
								</div>
							}

						</div>
						<button type="button" @onclick="UpdateAsync" class="bg-pink-600 font-semibold p-2 mt-2 rounded-md text-center text-white w-full">
							Edit </button>
						@if (!string.IsNullOrEmpty(msg))
						{
							<label style="color: red">@msg</label>
						}
					</div>

				</div>
			}

		</div>
	</div>
</div>
</body>

@code {
    [Parameter]
    public int Id { get; set; }

    private string postTitle = "";
    private string postDescription = "";
    private IList<string> postTags = new List<string>();
    private string newTag = "";
    Post? postData { get; set; }
	private bool showAlert;

    private string msg = "";

    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            ICollection<Post> posts = await postService.GetAsync(Id);
            postData = posts.FirstOrDefault();

            if (postData == null)
            {
                msg = "This post does not exist!";
                return;
            }

            postTitle = postData.Title;
            postDescription = postData.Description;

            await LoadPostTags();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadPostTags()
    {
        IEnumerable<Tag> tags = await tagService.GetPostTagAsync(Id);
        foreach (var tag in tags)
        {
            postTags.Add(tag.tagName);
        }
    }

    private async Task UpdateAsync()
    {
        try
        {
            UpdatePostDto dto = new(Id)
            {
                Title = postTitle,
                Description = postDescription,
                Tags = postTags
            };

            await postService.UpdateAsync(dto, postData.Owner.Id);
            await tagService.DeleteAsync(postData.Id);
            PostTagCreationDto tagDto = new(Id, postTags.ToArray());
            await tagService.CreateAsync(tagDto);


	        showAlert = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private void AddTag()
    {
        if (newTag.Equals("") || postTags.Contains(newTag))
        {
            return;
        }
        postTags.Add(newTag);
        newTag = "";
    }

    private void RemoveTag(string tag)
    {
        postTags.Remove(tag);
    }

	private void NavigateToFeed()
	{
		navMgr.NavigateTo("posts/all");
	}
}
