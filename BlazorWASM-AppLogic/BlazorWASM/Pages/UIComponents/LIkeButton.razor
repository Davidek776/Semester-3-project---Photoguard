@using Domain.Models
@namespace UIComponents
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using BlazorWasm.Services
@inject ILikeService likeService
@inject IAuthService authService
@inject IUserService userService


@if (isLiked)
{
    @* <div class="field"> *@
    @*     <button *@
    @*         @onclick="@(() => UnlikePostAsync(PostId))" *@
    @*         class="like-button" role="button"> *@
    @*         Like *@
    @*         <img class="icon" src="img/like_pressed.svg"/> *@
    @*     </button> *@
    @* </div> *@
    // c
    <a href=""  @onclick:preventDefault="true" @onclick="@(() => UnlikePostAsync(PostId))" class="flex items-center space-x-2">
        <div class="p-2 rounded-full text-black">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" width="22" height="22" class="dark:text-gray-100">
                <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
            </svg>
        </div>
        <div> Like</div>
    </a>
}
else
{
    @* <div class="field"> *@
    @*     <button *@
    @*         @onclick="@(() => LikePostAsync(PostId))" *@
    @*         class="like-button" role="button"> *@
    @*         Like *@
    @*         <img class="icon" src="img/like_notpressed.svg"/> *@
    @*     </button> *@
    @* </div> *@
    
    <a href=""   @onclick:preventDefault="true" @onclick="@(() => LikePostAsync(PostId))" class="flex items-center space-x-2">
        <div class="p-2 rounded-full text-black">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="#9ca3af" width="22" height="22" class="dark:text-gray-100">
                <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
            </svg>
        </div>
        <div> Like</div>
    </a>
}

@code {

    [Parameter]
    public long PostId { get; set; }
    [Parameter]
    public Action<int> UpdateParentsLikes { get; set; }

    private long userId;
    private bool isLiked = false;

    protected override async Task OnInitializedAsync()
    {

	    userId = await authService.GetLoggedUserId();
	    isLiked = await IsLikedAsync(PostId);
    }


    private async Task LikePostAsync(long postId)
    {
        try
        {
	        if (userId == 0)
	        {
		        // msg = "You have to be logged in!";
		        return;
	        }

            LikePostDto dto = new LikePostDto(postId, userId);
            isLiked = !isLiked;
            UpdateParentsLikes(1);
            await likeService.LikePostAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task UnlikePostAsync(long postId)
    {
        try
        {
            UnLikePostDto dto = new UnLikePostDto(postId, userId);
            isLiked = !isLiked;
            UpdateParentsLikes(-1);
            await likeService.UnLikePostAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task<bool> IsLikedAsync(long postId)
    {
        try
        {
            IsPostLikedDto dto = new(postId, userId);
            return await likeService.IsPostLikedAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}
