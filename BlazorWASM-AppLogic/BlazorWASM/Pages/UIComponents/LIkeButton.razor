@using Domain.Models
@using Domain.DTOs
@using HttpClients.ClientInterfaces
@using System.Security.Claims
@using BlazorWasm.Services
@namespace UIComponents
@inject ILikeService likeService
@inject IAuthService authService
@inject IUserService userService


@if (isLiked)
{
    <div class="field">
        <button
            @onclick="@(() => UnlikePostAsync(PostId))"
            class="like-button" role="button">
            Like
            <img class="icon" src="img/like_pressed.svg"/>
        </button>
    </div>
}
else
{
    <div class="field">
        <button
            @onclick="@(() => LikePostAsync(PostId))"
            class="like-button" role="button">
            Like
            <img class="icon" src="img/like_notpressed.svg"/>
        </button>
    </div>
}

@code {

    [Parameter]
    public long PostId { get; set; }
    [Parameter]
    public Action<int> UpdateParentsLikes { get; set; }

    private long userId;
    private bool isLiked = false;

    protected override async Task OnInitializedAsync()
    {

	    userId = await authService.GetLoggedUserId();
	    isLiked = await IsLikedAsync(PostId);
    }


    private async Task LikePostAsync(long postId)
    {
        try
        {
	        if (userId == 0)
	        {
		        // msg = "You have to be logged in!";
		        return;
	        }

            LikePostDto dto = new LikePostDto(postId, userId);
            isLiked = !isLiked;
            UpdateParentsLikes(1);
            await likeService.LikePostAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task UnlikePostAsync(long postId)
    {
        try
        {
            UnLikePostDto dto = new UnLikePostDto(postId, userId);
            isLiked = !isLiked;
            UpdateParentsLikes(-1);
            await likeService.UnLikePostAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task<bool> IsLikedAsync(long postId)
    {
        try
        {
            IsPostLikedDto dto = new(postId, userId);
            return await likeService.IsPostLikedAsync(dto);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
}
