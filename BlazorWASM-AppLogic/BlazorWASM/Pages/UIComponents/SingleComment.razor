@namespace UIComponents

@using Domain.Models
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@using Shared
@using System.Security.Claims
@using BlazorWasm.Services

@inject IUserService userService
@inject ICommentService commentService
@inject IAuthService authService

<div class="my-2">
       <div class="flex">
       <div class="w-10 h-10 rounded-full relative flex-shrink-0">
           <img src="assets/images/avatars/avatar-1.jpg" alt="" class="absolute h-full rounded-full w-full">
       </div>
       <div class="flex items-center  text-gray-700 py-2 px-3 rounded-md bg-gray-100 h-full relative lg:ml-5 ml-2 lg:mr-20  dark:bg-gray-800 dark:text-gray-100">
           <p class="leading-6 flex flex-col"> <strong>@Comment.OwnerUsername</strong>@Comment.Body </p>

              <AuthorizeView>
                  <Authorized>
                       @if (commentInput==false)
                       {
                           <i
                               class="uil-corner-right-down ml-5" @onclick="@(() => commentInput = !commentInput)">
                                </i>

                       }
                  </Authorized>
               </AuthorizeView>
           
           <div class="absolute w-3 h-3 top-3 -left-1 bg-gray-100 transform rotate-45 dark:bg-gray-800"></div>
       </div>
    </div>
    @* <p>@Util.DateTimeToRelativeTime(Comment.CreatedAt)</p> *@

    <AuthorizeView>
        <Authorized>
            <div class="flex mt-2">  
                @if (commentInput)
                  {
                      <button   
                          @onclick="@(() => commentInput = !commentInput)">
                          <i class="icon-feather-x text-lg mr-1"></i>
                      </button>
                  }
      
                  @if (commentInput)
                  {
                      <div class="bg-gray-100 bg-gray-100 rounded-full rounded-md relative dark:bg-gray-800">
                          <input type="text" @bind="commentInputText" placeholder="Add your Sub-Comment.." class="bg-transparent max-h-10 shadow-none">
                          <div class="absolute bottom-0 flex h-full items-center right-0 right-3 text-xl space-x-2">
                              <a href="#" @onclick:preventDefault="true" @onclick="PublishAsync"> <i class="uil-comment"></i></a>
                              @* <a href="#"> <i class="uil-video"></i></a> *@
                          </div>
                      </div>
                  }</div>
          
        </Authorized>
    </AuthorizeView>

    <ol>
        @if (subComments.Any())
        {
            foreach (var subComment in subComments)
            {
                <li class="ml-5">
                    <SingleComment Comment="@subComment" />
                </li>
            }
        }
    </ol>

</div>

@code {
    [Parameter]
    public Comment Comment { get; set; }

    private ICollection<Comment> subComments = new List<Comment>();

    private bool commentInput = false;
    private string commentInputText = "";

    private async void PublishAsync()
    {
        if (string.IsNullOrEmpty(commentInputText))
        {
            return;
        }

        commentInput = false;

        try
        {
            long userId = await authService.GetLoggedUserId();
            if (userId == 0)
            {
    // msg = "You have to be logged in!";
                return;
            }

            long createdCommentId = await commentService.CreateAsync(commentInputText, userId, Comment.PostId);
            await commentService.AssignCommentToParentAsync(createdCommentId, Comment.Id);

            await LoadAsync();

            commentInputText = "";

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    private async Task LoadAsync()
    {
        try
        {
            subComments = await commentService.GetAllSubCommentsAsync(Comment.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    
}