@using Domain.Models
@namespace UIComponents
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@using BlazorWasm.Services
@using HttpClients.Implementations
@inject NavigationManager navMgr
@inject ICommentService commentService
@inject IAuthService authService
@inject IPostService postService
@inject ITagService tagService

    <div class="bg-white shadow rounded-md dark:bg-gray-900 -mx-2 lg:mx-0 pb-8">
                        
                            <!-- post header-->
                            <div class="flex justify-between items-center px-4 py-3">
                                <div class="flex flex-1 items-center space-x-4">
                                    <a href="#">
                                        <div class="bg-gradient-to-tr from-yellow-600 to-pink-600 p-0.5 rounded-full">
                                            <img src="assets/images/avatars/avatar-2.jpg" class="bg-gray-200 border border-white rounded-full w-8 h-8">
                                        </div>
                                    </a>
                                    <div class="preTitle">
                                        <span class="block capitalize font-semibold dark:text-gray-100"> @postDetail.Owner.UserName </span>
                                        <span class="block capitalize font-normal dark:text-gray-100"> </span>
                                    </div>
                        
                        
                                </div>
                                <div>
                                    @* edit1 *@
                                    <AuthorizeView>
                                        <Authorized>
                                             @if (postDetail.Owner.UserName == @context.User.Identity.Name)
                                                                            {
                                            <a href="#" @onclick:preventDefault="true" > <i class="icon-feather-more-horizontal text-2xl hover:bg-gray-200 rounded-full p-2 transition -mr-1 dark:hover:bg-gray-700"></i> </a>
                                            <div class="bg-white w-56 shadow-md mx-auto p-2 mt-12 rounded-md text-gray-500 hidden text-base border border-gray-100 dark:bg-gray-900 dark:text-gray-100 dark:border-gray-700" uk-drop="mode: hover;pos: top-right">

                                                <ul class="space-y-1">
                                                    
                                                    <li @onclick:preventDefault="true" @onclick="Edit">
                                                        <a href="#" class="flex items-center px-3 py-2 hover:bg-gray-200 hover:text-gray-800 rounded-md dark:hover:bg-gray-800">
                                                            <i class="uil-edit-alt mr-1"></i> Edit Post
                                                        </a>
                                                    </li>
                                                   
                                                    <li   @onclick="Delete">
                                                        <a href="posts/allUpdated" class="flex items-center px-3 py-2 text-red-500 hover:bg-red-100 hover:text-red-500 rounded-md dark:hover:bg-red-600">
                                                            <i class="uil-trash-alt mr-1"></i> Delete
                                                        </a>
                                                    </li>
                                                </ul>

                                            </div>
                                            }

                                        </Authorized>
                                </AuthorizeView>
                                </div>
                            </div>
                            <div class="titleDateBox flex justify-between">
                                <h3 class="ml-4">@postDetail.Title</h3>
                                <p class="text-xs mr-4" >@postDetail.PostedOn</p>
                        
                            </div>
                            <div uk-lightbox>
                                <a href="assets/images/post/img4.jpg">
                                    @* <img src="assets/images/post/img4.jpg" alt=""> *@
                                    <img src="@postDetail.ImgUrl" alt="thumbnail"/>
                        
                                </a>
                            </div>
                        
                        
                            <div class="py-3 px-4 space-y-3">
                        
                                <div class="flex space-x-4 lg:font-bold">
                                     <LIkeButton PostId="postDetail.Id" UpdateParentsLikes="UpdateLikes"/>

                                    <a href="#" class="flex items-center space-x-2">
                                        <div class="p-2 rounded-full text-black">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" width="22" height="22" class="dark:text-gray-100">
                                                <path fill-rule="evenodd" d="M18 5v8a2 2 0 01-2 2h-5l-5 4v-4H4a2 2 0 01-2-2V5a2 2 0 012-2h12a2 2 0 012 2zM7 8H5v2h2V8zm2 0h2v2H9V8zm6 0h-2v2h2V8z" clip-rule="evenodd" />
                                            </svg>
                                        </div>
                                        <div> Comment</div>
                                    </a>
                                    <a href="#" class="flex items-center space-x-2 flex-1 justify-end">
                                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" width="22" height="22" class="dark:text-gray-100">
                                            <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
                                        </svg>
                                        <div> Share</div>
                                    </a>
                                </div>
                                <div class="flex items-center space-x-3">
                                    <div class="flex items-center">
                                        <img src="assets/images/avatars/avatar-1.jpg" alt="" class="w-6 h-6 rounded-full border-2 border-white dark:border-gray-900">
                                        <img src="assets/images/avatars/avatar-4.jpg" alt="" class="w-6 h-6 rounded-full border-2 border-white dark:border-gray-900 -ml-2">
                                        <img src="assets/images/avatars/avatar-2.jpg" alt="" class="w-6 h-6 rounded-full border-2 border-white dark:border-gray-900 -ml-2">
                                    </div>
                                    <div class="dark:text-gray-100">
                                        Liked by <strong>@postDetail.Likes</strong> people
                                    </div>
                                </div>
                                 <div class="p-3  border-t ">
                                    @postDetail.Description
                                 </div>
                                 <div class="lg:m-0 -mx-5 flex justify-between py-1 relative space-x-3  dark-tabs"  style="">
                                                    <div class="flex flex-wrap lg:pl-0 pl-5 space-x-3">
                                                        @foreach (var tag in tags)
                                                        {
                                                            <a href="#" class="bg-white py-2 px-4 my-2 rounded inline-block font-bold shadow"> @tag.tagName</a>
                                                        }
                                                          </div>
                                                </div>
                               
                                    
                                </div>
                        
                         
                        <AuthorizeView>
                            <Authorized>
                                <div class="bg-gray-100 bg-gray-100 rounded-full rounded-md relative dark:bg-gray-800 mx-3 ">
                                    <input type="text" @bind="commentInputText" placeholder="Add your Comment.." class="bg-transparent max-h-10 shadow-none ">
                                    <div class="absolute bottom-0 flex h-full items-center right-0 right-3 text-xl space-x-2">
                                        <a href="#"  @onclick:preventDefault="true" @onclick="PublishAsync"> <i class="uil-comment"></i></a>
                                        @* <a href="#"> <i class="uil-video"></i></a> *@
                                    </div>
                                </div>
                                
                            
                            </Authorized>
                            </AuthorizeView>
                        
                        
                            @if (comments.Any())
                            {
                                <ol class="ml-3 pt-3">
                                    @foreach (var comment in comments)
                                    {
                                        <li>
                                            <SingleCommentUpdated Comment="@comment"/>
                                        </li>
                                    }
                                </ol>
                            }
                            </div>
                        
                        
    @code {
        [Parameter]
        public Post postDetail { get; set; }
        private ICollection<Comment> comments = new List<Comment>();

        private ICollection<TagPost> tags = new List<TagPost>();

        
        
        private string commentInputText = "";

        private async Task PublishAsync()
        {
            if (string.IsNullOrEmpty(commentInputText))
            {
                return;
            }

            try
            {
                ClaimsPrincipal context = await authService.GetAuthAsync();
                var claims = context.Identities.First().Claims.ToList();
                string? ownerId = claims?.FirstOrDefault(x => x.Type.Equals("Id", StringComparison.OrdinalIgnoreCase))?.Value;

                await commentService.CreateAsync(commentInputText, long.Parse(ownerId), postDetail.Id);

                commentInputText = "";
                await UpdateCommentsAsync();

                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        protected override async Task OnInitializedAsync()
        {
            try
            {
                await UpdateCommentsAsync();
                await UpdateTagsAsync();

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
        
        private async Task UpdateTagsAsync()
        {
            try
            {
                tags = await tagService.GetPostTagAsync(postDetail.Id);
                   
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }


        private void UpdateLikes(int changeDiff)
        {
            postDetail.Likes += changeDiff;
            StateHasChanged();
        }

        private async Task UpdateCommentsAsync()
        {
            try
            {
                comments = await commentService.GetCommentsByPostAsync(postDetail.Id);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    
        private async Task Delete()
        {
            try
            {
                await postService.DeleteAsync(postDetail.Id, postDetail.Owner.Id);
                navMgr.NavigateTo($"posts/allUpdated",true);

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
	
        private async Task Edit()
        {
            try
            {
                navMgr.NavigateTo($"EditPostUpdated/{postDetail.Id}");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }
    
}