@page "/admin/reports"
@using HttpClients.ClientInterfaces
@using Report = Domain.Models.Report
@using System.Security.Claims
@using BlazorWasm.Services
@using Domain.Models
@using UIComponents
@inject IReportService reportService
@inject IAuthService authService
@inject IAdminService adminService

<label style="color: red">@msg</label>
<AdminSideBar></AdminSideBar>

		<div class="container m-auto">

			<AuthorizeView>
	<Authorized>
	@if (reports.Any() && admin != null)
	{
		


		
		<div class="lg:flex justify-center lg:space-x-10 lg:space-y-0 space-y-5">
    
	<!-- left sidebar-->
	<div class="space-y-5 flex-shrink-0 lg:w-7/12">
		 <Alert Type="success" Show="@showAlert" >
        			        <p>Post was succesfully banned!</p>
        			        <button @onclick="(() => showAlert = false)">keep banning</button>
        		        </Alert>
		@foreach (var report in reports)
		{

			
			<SingleReport Report="@report" OnClickCallback="LoadReportsAfterBan" Admin="admin"/>

		}
	</div>
    </div>
	}
	else
	{
		<label class="text-center">There are no reports to show</label>
	}
	</Authorized>
</AuthorizeView>
					</div>


@code {
    IEnumerable<Report> reports = new List<Report>();
    private string msg = "";
	private Admin? admin;
	private bool showAlert;

    protected override async Task OnInitializedAsync()
    {
        try
        {

	        ClaimsPrincipal context = await authService.GetAuthAsync();
	        if (context.Identity?.Name == null)
	        {
		        msg = "You have to be logged in!";
		        return;
	        }

	        IEnumerable<Admin> adminList = await adminService.GetAsync(context.Identity.Name);
	        admin = adminList.FirstOrDefault();

	        if (admin == null)
	        {
		        msg = "You do not have access to this page";
		        return;
	        }

           await LoadReports();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task LoadReports()
    {
        reports = await reportService.GetAsync();
	   
    }

	private async Task LoadReportsAfterBan()
	{
		await LoadReports();
		showAlert = true;
		
    }


}
